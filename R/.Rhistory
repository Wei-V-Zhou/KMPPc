shiny::runApp('H:/R-3.6.3/shinyapp/KMPPc')
rm(list = ls())
gc()
graphics.off()
options(stringsAsFactors = FALSE)
# load packages
pkgs <- c("cgdsr", "ggplot2", "stringr", "ggpubr", "survival",
"survminer", "readxl","ggstatsplot", "export")
installpkgs <- function(pkgs){
new.pkgs <- pkgs[!(pkgs %in% installed.packages()[ , "Package"])]
if (length(new.pkgs))
BiocManager::install(new.pkgs, ask = F, update = F)
sapply(pkgs, require, character.only = T)
}
installpkgs(pkgs)
lapply(pkgs, library, character.only = T)
help("scan")
scan(text = "1 2 3")
scan(text = "1")
help("edit")
mean <- edit(mean, editor = "xedit")
help("BiocManager::install()")
help("BiocManager::install")
help("BiocManager")
BiocManager::install()
v <- scan(sep = ',')
print("Please choose a dataset, the dataset number is: "); scan(what = integer(), n = 1)
print("Please choose a dataset, the dataset number is: "); scan(what = integer(), n = 1, multi.line = F)
print("Please choose a dataset, the dataset number is: "); scan(what = integer(), n = 1, multi.line = F,
quiet = T)
quiet = T)
print("Please choose a dataset, the dataset number is: "); scan(what = integer(), n = 1, multi.line = F, quiet = T)
## 0. prepare environment and load libraries
rm(list = ls())
gc()
graphics.off()
options(stringsAsFactors = FALSE)
# load packages
pkgs <- c("cgdsr", "ggplot2", "stringr", "ggpubr", "survival",
"survminer", "readxl","ggstatsplot", "export")
installpkgs <- function(pkgs){
new.pkgs <- pkgs[!(pkgs %in% installed.packages()[ , "Package"])]
if (length(new.pkgs))
BiocManager::install(new.pkgs, ask = F, update = F)
sapply(pkgs, require, character.only = T)
}
installpkgs(pkgs)
lapply(pkgs, library, character.only = T)
mycgds <- CGDS("http://www.cbioportal.org/")
# set verbose options to debug and troubleshoot issues
setVerbose(mycgds, TRUE)
# guarantee the unauthorized accessment
mysecurecgds <- CGDS("http://cbioportal.mskcc.org/",
token = "fd0522cb-7972-40d0-9d83-cb4c14e8a337")
# get list of cancer studies at server for view to choose
cancerstudy <- getCancerStudies(mycgds)
# get list of cancer studies at server for view to choose
cancerstudy <- getCancerStudies(mycgds)
View(cancerstudy)
cancerid <- cancerstudy[which(!is.na(str_extract(cancerstudy[ , 1], "brca"))), 1]
studydoi <- cancerstudy[which(!is.na(str_extract(cancerstudy[ , 1], "brca"))), 2]
Mainstr$id <- cbind(cancerid, studydoi)
MainstrId <- cbind(cancerid, studydoi)
MainstrId
View(MainstrId)
print(MainstrId)
print("Please choose a dataset, the dataset number is: "); scan(what = integer(), n = 1, multi.line = F, quiet = T)
print(Info); scan(what = integer(), n = 1, multi.line = F, quiet = T)
Info <- "Please choose a dataset, the dataset number is: "
print(Info); scan(what = integer(), n = 1, multi.line = F, quiet = T)
print(Info, zero.print = "."); DataSet <- scan(what = integer(), n = 1, multi.line = F, quiet = T)
Mainstr <- data.frame()
Mainstr$id <- cbind(cancerid, studydoi)
print(MainstrId, zero.print = ".")
print.table(MainstrId, zero.print = ".")
print.table(MainstrId, zero.print = ".")
T <- table(t2,t1)
T <- T * (1+round(rlnorm(length(T)))/4)
print(T, zero.print = ".")
t1 <- round(abs(rt(200, df = 1.8)))
t2 <- round(abs(rt(200, df = 1.4)))
table(t1, t2) # simple
print(table(t1, t2), zero.print = ".")
print.table(MainstrId, right = F)
print.table(MainstrId, right = F, justify = "left")
print.table(MainstrId, right = F, justify = "left-justified")
print.table(MainstrId, right = F, justify = "centre")
print.table(studydoi, right = F, justify = "centre")
print.table(studydoi, right = F, justify = "centre")
Info <- "Please choose a dataset, the dataset number is: "
scan(what = integer(), n = 1, multi.line = F, quiet = T, allowEscapes = F)
scan(what = integer(), n = 1, multi.line = F, quiet = T, skipNul = F)
scan(what = integer(), n = 1, multi.line = F, quiet = T, comment.char = Info)
scan(what = integer(), n = 1, multi.line = F, quiet = T, comment.char = "Please choose a dataset, the dataset number is: ")
scan(what = integer(), n = 1, multi.line = F, quiet = T, comment.char = "Please")
scan(what = integer(), n = 1, multi.line = F, quiet = T, comment.char = "P")
scan(file = "", what = integer(), n = 1, multi.line = F, quiet = T, comment.char = "输入")
help("edit")
print.table(studydoi, right = F, justify = "centre")
scan(what = integer(), n = 1, multi.line = F, quiet = T)
scan(what = integer(), n = 1, multi.line = F, quiet = T)
scan(what = integer(), n = 1, multi.line = F, quiet = T)
DataSet <- scan(file = "", what = integer(), n = 1, multi.line = F, quiet = T)
print(Info); DataSet <- scan(file = "", what = character(), n = 1, multi.line = F, quiet = T)
num <- as.numeric(DataSet)
print(Info); DataSet <- scan(file = "", what = character(), n = 1, multi.line = F, quiet = T)
num <- as.numeric(DataSet)
num
if(is.null(num) || num <= 0 || num > length(studydoi)){
print("Please type right number!"); print(Info)
}
if(is.null(num) | num <= 0 | num > length(studydoi)){
print("Please type right number!"); print(Info)
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!"); print(Info)
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!"); print(Info)
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!"); print(Info)}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!")
print(Info)
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!")
print(Info)
Mainstr$dataset <- cancerid[DataSet]
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!")
print(Info); DataSet <- scan(file = "", what = character(), n = 1, multi.line = F, quiet = T)
MainstrDat <- cancerid[num]
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!")
print(Info); DataSet <- scan(file = "", what = character(), n = 1, multi.line = F, quiet = T)
MainstrDat <- cancerid[num]
}
if (num > 0 && num <= length(studydoi)) {
MainstrDat <- cancerid[num]
}
num = 2
if (num > 0 && num <= length(studydoi)) {
MainstrDat <- cancerid[num]
}
num <- as.numeric(DataSet)
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number!")
print(Info); DataSet <- scan(file = "", what = character(), n = 1, multi.line = F, quiet = T)
help("readline")
Info < readline("Please input your interested dataset number: ")
Info < readline("Please input your interested dataset number: ")
Info < readline("Please input your interested dataset number: ")
if(interactive()){
repeat{
Info < readline("Please input your interested dataset number: ")
num <- as.numeric(Info)
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number format")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number format")
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
}
if(num = NA || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
}
if(num == NA || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
}
if(num == NA || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
}
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
}
if(interactive()){
repeat{
Info < readline("Please input your interested dataset number: ")
num <- as.numeric(Info)
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
Info < readline("Please input your interested dataset number: ")
substr("abcdef", 2, 4)
substring("abcdef", 1:6, 1:6)
if(interactive()){
repeat{
Info < readline("Please input your interested dataset number: ")
num <- as.numeric(substr(Info, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
substr(Info, 1, 1)
interactive()
Info < readline("Please input your interested dataset number: ")
if(interactive()){
repeat{
Info < readline("Please input your interested dataset number: ")
print(substr(Info, 1, 1))
num <- as.numeric(substr(Info, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
if(interactive()){
repeat{
Info < readline("Please input your interested dataset number! ")
print(substr(Info, 1, 1))
num <- as.numeric(substr(Info, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
re-prompt
if(interactive()){
repeat{
Info < readline("Please input your interested dataset number: ")
print(Info)
num <- as.numeric(substr(Info, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
fun <- function() {
ANSWER <- readline("Are you a satisfied R user? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
if (substr(ANSWER, 1, 1) == "n")
cat("This is impossible.  YOU LIED!\n")
else
cat("I knew it.\n")
}
if(interactive()) fun()
fun <- function() {
ANSWER <- readline("Are you a satisfied R user? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
if (substr(ANSWER, 1, 1) == "n")
cat("This is impossible.  YOU LIED!\n")
else
cat("I knew it.\n")
}
if(interactive()) fun()
fun <- function() {
ANSWER <- readline("Are you a satisfied R user? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
print(substr(ANSWER, 1, 1))
if (substr(ANSWER, 1, 1) == "n")
cat("This is impossible.  YOU LIED!\n")
else
cat("I knew it.\n")
}
if(interactive()) fun()
fun <- function() {
ANSWER <- readline("Are you a satisfied R user? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
print(substr(ANSWER, 1, 1))
if (substr(ANSWER, 1, 1) == "n")
cat("This is impossible.  YOU LIED!\n")
else
cat("I knew it.\n")
}
if(interactive()) fun()
repeat{
Info < readline("Please input your interested dataset number: ")
print(substr(Info, 1, 1))
num <- as.numeric(substr(Info, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
if(interactive()){
repeat{
ANSWER <- readline("Are you a satisfied R user? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
print(substr(ANSWER, 1, 1))
num <- as.numeric(substr(Info, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
if(interactive()){
repeat{
ANSWER <- readline("Are you a satisfied R user? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
print(substr(ANSWER, 1, 1))
num <- as.numeric(substr(ANSWER, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
print(substr(ANSWER, 1, 1))
num <- as.numeric(substr(ANSWER, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
print(substr(ANSWER, 1, 1))
num <- as.numeric(substr(ANSWER, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
num <- as.numeric(substr(ANSWER, 1, 1))
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
num <- as.numeric(ANSWER)
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
MainstrDat <- cancerid[num]
mycaselist <- getCaseLists(mycgds, MainstrDat)
View(mycaselist)
mygeneticprofile <- getGeneticProfiles(mycgds, MainstrDat)
View(mygeneticprofile)
# get available case lists for a given cancer study
if(studyId = NULL){
MainstrId <- cbind(cancerid, studydoi)
print.table(studydoi, right = F, justify = "centre")
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
num <- as.numeric(ANSWER)
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
# get available case lists for a given cancer study
if(studyId = NULL){
MainstrId <- cbind(cancerid, studydoi)
print.table(studydoi, right = F, justify = "centre")
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
num <- as.numeric(ANSWER)
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
# get available case lists for a given cancer study
if(is.null(studyId)){
MainstrId <- cbind(cancerid, studydoi)
print.table(studydoi, right = F, justify = "centre")
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
num <- as.numeric(ANSWER)
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
MainstrDat <- cancerid[num]
mygeneticprofile <- getGeneticProfiles(mycgds, MainstrDat)
mycaselist <- getCaseLists(mycgds, MainstrDat)
Mainstr$mrnanum  <- grep("mrna", mycaselist[ , 1])
mygeneticprofile <- getGeneticProfiles(mycgds, Mainstr$dataset)
Mainstr$mrnaNum  <- grep("mrna", mygeneticprofile[ , 1])[1]
}
studyId <- null
studyId <- NA
# get available case lists for a given cancer study
if(is.null(studyId)){
MainstrId <- cbind(cancerid, studydoi)
print.table(studydoi, right = F, justify = "centre")
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
num <- as.numeric(ANSWER)
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
MainstrDat <- cancerid[num]
mygeneticprofile <- getGeneticProfiles(mycgds, MainstrDat)
mycaselist <- getCaseLists(mycgds, MainstrDat)
Mainstr$mrnanum  <- grep("mrna", mycaselist[ , 1])
mygeneticprofile <- getGeneticProfiles(mycgds, Mainstr$dataset)
Mainstr$mrnaNum  <- grep("mrna", mygeneticprofile[ , 1])[1]
}
# get available case lists for a given cancer study
if(is.na(studyId)){
MainstrId <- cbind(cancerid, studydoi)
print.table(studydoi, right = F, justify = "centre")
if(interactive()){
repeat{
ANSWER <- readline("Please input the dataset number: ")
num <- as.numeric(ANSWER)
if(is.na(num) || num <= 0 || num > length(studydoi)){
print("Please type right number format!")
} else if (num > 0 && num <= length(studydoi)) {
break
}
}
}
MainstrDat <- cancerid[num]
mygeneticprofile <- getGeneticProfiles(mycgds, MainstrDat)
mycaselist <- getCaseLists(mycgds, MainstrDat)
Mainstr$mrnanum  <- grep("mrna", mycaselist[ , 1])
mygeneticprofile <- getGeneticProfiles(mycgds, Mainstr$dataset)
Mainstr$mrnaNum  <- grep("mrna", mygeneticprofile[ , 1])[1]
}
